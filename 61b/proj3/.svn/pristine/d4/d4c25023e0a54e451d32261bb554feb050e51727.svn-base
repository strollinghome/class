package graph;

/* See restrictions in Graph.java. */

import java.util.List;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.LinkedList;

/** The shortest paths through an edge-weighted graph.
 *  By overrriding methods getWeight, setWeight, getPredecessor, and
 *  setPredecessor, the client can determine how to represent the weighting
 *  and the search results.  By overriding estimatedDistance, clients
 *  can search for paths to specific destinations using A* search.
 *  @author Carlos A. Flores-Arellano.
 */
public abstract class ShortestPaths {

    /** The shortest paths in G from SOURCE. */
    public ShortestPaths(Graph G, int source) {
        this(G, source, 0);
    }

    /** A shortest path in G from SOURCE to DEST. */
    @SuppressWarnings("unchecked")
    public ShortestPaths(Graph G, int source, int dest) {
        _G = G;
        _source = source;
        _dest = dest;
        _vertexComparator = new VertexComparator<>();
        _fringe = new PriorityQueue<Integer>(_G.vertexSize(),
                                                _vertexComparator);
    }

    /** Initialize the shortest paths.  Must be called before using
     *  getWeight, getPredecessor, and pathTo. */
    public void setPaths() {
        Iteration<Integer> successors;
        double weight;
        int vertex;
        setWeight(_source, 0);
        _fringe.add(_source);
        while (!_fringe.isEmpty()) {
            vertex = _fringe.remove();
            System.out.println(vertex);
            if (vertex == _dest) {
                break;
            }
            successors = _G.successors(vertex);
            for (Integer successor : successors) {
                weight = getWeight(vertex, successor)
                            + getWeight(vertex) + estimatedDistance(successor);
                if (getWeight(successor) > weight) {
                    setWeight(successor, weight);
                    setPredecessor(successor, vertex);
                    if (_fringe.contains(successor)) {
                        _fringe.remove(successor);
                        _fringe.add(successor);
                    } else {
                        _fringe.add(successor);
                    }
                }
            }
        }
    }

    /** Returns the starting vertex. */
    public int getSource() {
        return _source;
    }

    /** Returns the target vertex, or 0 if there is none. */
    public int getDest() {
        return _dest;
    }

    /** Returns the current weight of vertex V in the graph.  If V is
     *  not in the graph, returns positive infinity. */
    public abstract double getWeight(int v);

    /** Set getWeight(V) to W. Assumes V is in the graph. */
    protected abstract void setWeight(int v, double w);

    /** Returns the current predecessor vertex of vertex V in the graph, or 0 if
     *  V is not in the graph or has no predecessor. */
    public abstract int getPredecessor(int v);

    /** Set getPredecessor(V) to U. */
    protected abstract void setPredecessor(int v, int u);

    /** Returns an estimated heuristic weight of the shortest path from vertex
     *  V to the destination vertex (if any).  This is assumed to be less
     *  than the actual weight, and is 0 by default. */
    protected double estimatedDistance(int v) {
        return 0.0;
    }

    /** Returns the current weight of edge (U, V) in the graph.  If (U, V) is
     *  not in the graph, returns positive infinity. */
    protected abstract double getWeight(int u, int v);

    /** Returns a list of vertices starting at _source and ending
     *  at V that represents a shortest path to V.  Invalid if there is a
     *  destination vertex other than V. */
    public List<Integer> pathTo(int v) {
        int i = v;
        List<Integer> path = new LinkedList<>();
        path.add(0, i);
        while (i != _source) {
            i = getPredecessor(i);
            path.add(0, i);
        }
        return path;
    }

    /** Returns a list of vertices starting at the source and ending at the
     *  destination vertex. Invalid if the destination is not specified. */
    public List<Integer> pathTo() {
        return pathTo(getDest());
    }

    /** Comparator class for comparing the weights of vertices. */
    private class VertexComparator<Integer> implements Comparator {

        @Override
        public int compare(Object v, Object w) {
            int v0 = (int) v;
            int v1 = (int) w;
            if (getWeight(v0) == getWeight(v1)) {
                return 0;
            } else if (getWeight(v0) < getWeight(v1)) {
                return -1;
            } else {
                return 1;
            }
        }

    }

    /** The graph being searched. */
    protected final Graph _G;

    /** The starting vertex. */
    private final int _source;

    /** The target vertex. */
    private final int _dest;

    /** Comparator used to compare vertices. */
    private final VertexComparator<Integer> _vertexComparator;

    /** Priority Queue that used weights to prioritize objects. */
    private final PriorityQueue<Integer> _fringe;

}
