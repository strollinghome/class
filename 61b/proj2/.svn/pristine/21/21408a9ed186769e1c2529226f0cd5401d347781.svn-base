package jump61;

import java.util.ArrayList;

/** An automated Player.
 *  @author Carlos A. Flores-Arellano.
 */
class AI extends Player {

    /** Time allotted to all but final search depth (milliseconds). */
    private static final long TIME_LIMIT = 15000;

    /** Number of calls to minmax between checks of elapsed time. */
    private static final long TIME_CHECK_INTERVAL = 10000;

    /** Number of milliseconds in one second. */
    private static final double MILLIS = 1000.0;

    /** A new player of GAME initially playing COLOR that chooses
     *  moves automatically.
     */
    public AI(Game game, Side color) {
        super(game, color);
    }

    @Override
    void makeMove() {
        Game myGame = getGame();
        Board myBoard = myGame.getBoard();
        Board myBoardCopy = new MutableBoard(myBoard);
        // Move bestMove = findBestMove(getSide(), myBoardCopy, 3, 10000);
        ArrayList<Integer> myMoves = new ArrayList<>();
        minmax(getSide(), myBoardCopy, 4, 100000, myMoves);
        int move = myMoves.get(0);
        myGame.makeMove(move);
        myGame.reportMove(getSide(), myBoard.row(move), myBoard.col(move));
    }


    //testing generate a forced win condition.

    /** Return the minimum of CUTOFF and the minmax value of board B
     *  (which must be mutable) for player P to a search depth of D
     *  (where D == 0 denotes statically evaluating just the next move).
     *  If MOVES is not null and CUTOFF is not exceeded, set MOVES to
     *  a list of all highest-scoring moves for P; clear it if
     *  non-null and CUTOFF is exceeded. the contents of B are
     *  invariant over this call. */
    private int minmax(Side p, Board b, int d, int cutoff,
                       ArrayList<Integer> moves) {
        if (b.getWinner() == p) {
            return 1000;
        } else if (b.getWinner() == p.opposite()) {
            return -1000;
        }
        if (d == 0) {
            return staticEval0(p, b);
        }
        int bestSoFar = -199999;
        int response;
        ArrayList<Integer> legalMoves = getLegalMoves(p, b);
        ArrayList<Integer> moves0 = new ArrayList<>();
        int move;
        for (move = 0; move < b.size() * b.size(); move = move + 1) {
            if (b.isLegal(p, move)) {
                b.addSpot(p, move);
                response = minmax(p.opposite(), b, d - 1, -bestSoFar, moves0);
                if (-response > bestSoFar) {
                    bestSoFar = -response;
                    moves.add(move);
                }
                b.undo();
            }
        }
        return bestSoFar;
    }

    private int staticEval0(Side p, Board b) {
        return b.numOfSide(p);
    }

    private ArrayList<Integer> getLegalMoves(Side p, Board b) {
        ArrayList<Integer> legalMoves = new ArrayList<>();
        int i;
        int size = b.size();
        for (i = 0; i < size * size; i = i + 1) {
            if (b.isLegal(p, i)) {
                legalMoves.add(i);
            }
        }
        return legalMoves;
    }

    /** @return the first valid move for P on BOARD. */
    int chooseMove(Side p, Board b) {
        int validMove = Integer.MIN_VALUE;
        int i;
        for (i = 0; i < b.size() * b.size(); i = i + 1) {
            if (b.isLegal(p, i)) {
                validMove = i;
                break;
            }
        }
        return validMove;
    }

    /** Returns heuristic value of board B for player P.
     *  Higher is better for P. */
    public int staticEval(Side p, Board b) {
        int value = b.numOfSide(p);
        ArrayList<Integer> legalMoves = new ArrayList<>();
        int i;
        int size = b.size();
        for (i = 0; i < size * size; i = i + 1) {
            if (b.isLegal(p, i)) {
                legalMoves.add(i);
            }
        }
        for (i = 0; i < legalMoves.size(); i = i + 1) {
            b.addSpot(p, legalMoves.get(i));
            value = Math.max(value, b.numOfSide(p));
            b.undo();
        }
        return value;
    }


    /* My methods. */

    // Move findBestMove(Side p, Board b, int d, int cutoff) {
    //     if (d == 0) {
    //         return staticEval(p, b, cutoff);
    //     }
    //     Move bestSoFar = chooseMove(p, b);
    //     Move response;
    //     int responseValue;
    //     int myValue;
    //     ArrayList<Move> legalMoves = legalMoves(p, b);
    //     for (Move m : legalMoves) {
    //         makeMove(p, b, m);
    //         response = findBestMove(p.opposite(), m._b, d - 1, -bestSoFar._value);
    //         responseValue = response._value;
    //         myValue = bestSoFar._value;
    //         if (-responseValue > myValue) {
    //             m._value = -responseValue;
    //             bestSoFar = m;
    //             if (m._value >= cutoff) {
    //                 break;
    //             }
    //         }
    //     }
    //     return bestSoFar;
    // }

    // Move staticEval(Side p, Board b, int cutoff)    {
    //     Move bestSoFar;
    //     Move next;
    //     // bestSoFar = chooseMove(p, b);
    //     ArrayList<Move> legalMoves = legalMoves(p, b);
    //     int i;
    //     for (i = 0; i < legalMoves.size(); i = i + 1) {
    //         next = makeMove(p, b, legalMoves.get(i));
    //         if (next._value > bestSoFar._value) {
    //             bestSoFar = next;
    //             if (next._value >= cutoff) {
    //                 break;
    //             }
    //         }
    //     }
    //     return bestSoFar;
    // }

    /** @return the first valid move for P on BOARD. */
    // Move chooseMove(Side p, Board b) {
    //     Move validMove = new Move(0, Integer.MIN_VALUE, b);
    //     int i;
    //     for (i = 0; i < b.size() * b.size(); i = i + 1) {
    //         if (b.isLegal(p, i)) {
    //             validMove = new Move(i, b.numOfSide(p), b);
    //             break;
    //         }
    //     }
    //     return validMove;
    // }

    ArrayList<Move> legalMoves(Side p, Board b) {
        ArrayList<Move> legalMoves = new ArrayList<>();
        int i;
        int size = b.size();
        for (i = 0; i < size * size; i = i + 1) {
            if (b.isLegal(p, i)) {
                legalMoves.add(new Move(i, b.numOfSide(p), b));
            }
        }
        return legalMoves;
    }


    Move makeMove(Side p, Board b, Move m) {
        b.addSpot(p, m._move);
        return new Move(m._move, b.numOfSide(p), b);
    }

    public class Move {

        /** Holds this move. */
        int _move;

        /** Holds the value of this move. */
        int _value;

        /** Hold the board that this move creates. */
        Board _b;

        Move(int move, int value, Board b) {
            _move = move;
            _value = value;
            _b = b;
        }

    }

}
