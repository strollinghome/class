package jump61;

import java.util.ArrayList;

/** An automated Player.
 *  @author Carlos A. Flores-Arellano.
 */
class AI extends Player {

    /** Time allotted to all but final search depth (milliseconds). */
    private static final long TIME_LIMIT = 15000;

    /** Number of calls to minmax between checks of elapsed time. */
    private static final long TIME_CHECK_INTERVAL = 10000;

    /** Number of milliseconds in one second. */
    private static final double MILLIS = 1000.0;

    /** A new player of GAME initially playing COLOR that chooses
     *  moves automatically.
     */
    public AI(Game game, Side color) {
        super(game, color);
    }

    @Override
    void makeMove() {
        Game myGame = getGame();
        Board myBoard = myGame.getBoard();
        MutableBoard myBoardCopy = new MutableBoard(myBoard);
        ArrayList<Integer> myMoves = new ArrayList<>();
        minmax(getSide(), myBoardCopy, 3, 100000, myMoves);
        int move = myMoves.get(0);
        myGame.makeMove(move);
        myGame.reportMove(getSide(), myBoard.row(move), myBoard.col(move));
    }

    /** Return the minimum of CUTOFF and the minmax value of board B
     *  (which must be mutable) for player P to a search depth of D
     *  (where D == 0 denotes statically evaluating just the next move).
     *  If MOVES is not null and CUTOFF is not exceeded, set MOVES to
     *  a list of all highest-scoring moves for P; clear it if
     *  non-null and CUTOFF is exceeded. the contents of B are
     *  invariant over this call. */
    private int minmax(Side p, Board b, int d, int cutoff,
                       ArrayList<Integer> moves) {
        if (b.getWinner() == p) {
            return Integer.MAX_VALUE;
        } else if (b.getWinner() == p.opposite()) {
            return -Integer.MAX_VALUE;
        }
        if (d == 0) {
            return staticEval(p, b, cutoff);
        }
        int bestSoFar = -Integer.MAX_VALUE;
        int response;
        ArrayList<Integer> moves0 = new ArrayList<>();
        int move;
        for (move = 0; move < b.size() * b.size(); move = move + 1) {
            if (b.isLegal(p, move)) {
                b.addSpot(p, move);
                response = minmax(p.opposite(), b, d - 1, -bestSoFar, moves0);
                if (-response > bestSoFar) {
                    bestSoFar = -response;
                    moves.add(move);
                    if (bestSoFar >= cutoff) {
                        break;
                    }
                }
                b.undo();
            }
        }
        if (moves.isEmpty()) {
            moves.add(chooseLegalMove(p, b));
        }
        return bestSoFar;
    }

    /** Returns heuristic value of board B for player P.
     *  Higher is better for P. */
    public int staticEval(Side p, Board b, int cutoff) {
        int value = b.numOfSide(p);
        int move;
        int size = b.size();
        for (move = 0; move < size * size ; move = move + 1) {
            if (b.isLegal(p, move)) {
                b.addSpot(p, move);
                value = Math.max(value, b.numOfSide(p));
                if (value >= cutoff) {
                    break;
                }
            }
            b.undo();
        }
        return value;
    }

    /** @return any legal move for P on B if no winning move. */
    private int chooseLegalMove(Side p, Board b) {
        int move = 0;
        int i;
        for (i = 0; i < b.size() * b.size(); i = i + 1) {
            if (b.isLegal(p, i)) {
                move = i;
                break;
            }
        }
        return move;
    }

}
